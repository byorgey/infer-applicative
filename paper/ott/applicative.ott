% -*- compile-command: "ott -tex_show_meta false -i applicative.ott -o applicative.tex && pdflatex applicative.tex" -*-

embed
  {{ tex-preamble
\DeclareMathAlphabet{\mathbbold}{U}{bbold}{m}{n}
\usepackage{stmaryrd}
\DeclareMathOperator{\abox}{\raisebox{-0.1em}{$\square$} }
  }}

metavar termvar, x, f ::=
  {{ tex \mathit{[[termvar]]} }} {{ com  term variable  }}

metavar natural, n ::=
  {{ tex \mathit{[[natural]]} }} {{ com  natural number }}

indexvar k ::=
  {{ com  index }}

grammar
  term, t :: 't_' ::=                                   {{ com term }}
    | x                   ::   :: var                     {{ com variable }}
    | \ x . t             ::   :: lam  (+ bind x in t +)  {{ com abstraction }}
    | t t'                ::   :: app                     {{ com application }}
    | n                   ::   :: nat                     {{ com natural literal }}
    | c                   ::   :: con                     {{ com constant }}
    | pure                ::   :: pure                    {{ com pure }}
    | ap                  ::   :: ap                      {{ com ap }}
    | ( t )               :: S :: paren

  value, v :: 'v_' ::=                                  {{ com value }}
    | n                   ::   :: nat                     {{ com natural number }}
    | c                   ::   :: con                     {{ com constant }}
    | \ x . t             ::   :: lam                     {{ com abstraction }}

  basety, B :: 'B_' ::=                                 {{ com base type }}
    | N                   ::   :: nat                     {{ com naturals }}

  type, S {{ tex \sigma }}, T {{ tex \tau }} :: 'T_' ::=                    {{ com type }}
    | B                   ::   :: base                    {{ com base type }}
    | T1 -> T2            ::   :: arrow                   {{ com function type }}
    | [] T                ::   :: box                     {{ com box type }}
    | ( T )               :: M :: paren

  G {{ tex \Gamma }} :: G_ ::=                          {{ com type context }}
    | empty               ::   :: em                      {{ com empty context }}
    | G , x : T           ::   :: vn                      {{ com cons }}


  terminals :: 'terminals_' ::=
    | \                   ::   :: lambda     {{ tex \lambda }}
    | N                   ::   :: nat        {{ tex \mathbb{N} }}
    | []                  ::   :: box        {{ tex \abox }}
    | |-                  ::   :: turn       {{ tex \vdash }}
    | |-<:                ::   :: turnsu     {{ tex \vdash_{<:} }}
    | elem                ::   :: elem       {{ tex \in }}
    | ->                  ::   :: arr        {{ tex \to }}
    | <:                  ::   :: subtype    {{ tex \mathrel{<:} }}
    | <|                  ::   :: subtypet   {{ tex \vartriangleleft }}
    | Sig                 ::   :: signature  {{ tex \Sigma }}
    | empty               ::   :: empty      {{ tex \varnothing }}
    | pure                ::   :: pure       {{ tex \mathsf{pure} }}
    | ap                  ::   :: ap         {{ tex \mathsf{ap} }}

  formula :: 'formula_' ::=
    | judgement           ::   :: judgement
    | x : T elem G        ::   :: xTelemG
    | c : T elem Sig          ::   :: celemSig
    | formula1 .. formulak ::  :: dots
    | ( formula )         :: S :: parens

% parsing
%   uop_neg left t_app    % t1 - t2  should parse as  minus(t1, t2), not app(t1,neg(t2))
%   formula_dots left formula_not

subrules
  v <:: t

defns
  Jsub :: '' ::=

  defn
    T1 <: T2 :: :: sub :: sub_   {{ com $[[T1]]$ is a subtype of $[[T2]]$ }} by

    ------ :: refl
    T <: T

    T1 <: T2   T2 <: T3
    ------------------- :: trans
    T1 <: T3

    T1 <: S1    S2 <: T2
    ---------------------- :: arr
    S1 -> S2 <: T1 -> T2

    S <: T
    ------------ :: box
    [] S <: [] T

    ----------- :: pure
    T <: [] T

    --------------------------- :: ap
    [] (S -> T) <: [] S -> [] T

  defn
    T1 <| T2 :: :: subt :: subt_  {{ com $[[T1]]$ is a subtype of $[[T2]]$ }} by

    ------ :: refl
    T <| T

    T1 <| S1    S2 <| T2
    ---------------------- :: arr
    S1 -> S2 <| T1 -> T2

    S <| T
    ------------ :: box
    [] S <| [] T

    S <| T
    --------- :: pure
    S <| [] T

    S <| S1 -> S2      [] S1 -> [] S2 <| T
    --------------------------------------  :: ap
    [] S <| T

    S <| S1 -> S2      [] S1 -> [] S2 <| T
    --------------------------------------  :: pureap
    S <| T


defns
  Jtype :: '' ::=

  defn
    G |- t : T :: :: type :: ty_    {{ com $[[t]]$ has type $[[T]]$ in context $[[G]]$ }} by

    x : T elem G
    ------------ :: var
    G |- x : T

    G , x : S |- t : T
    --------------------- :: lam
    G |- \ x . t : S -> T

    G |- t1 : S -> T      G |- t2 : S
    --------------------------------- :: app
    G |- t1 t2 : T

    c : T elem Sig
    -------------- :: const
    G |- c : T

    --------------------- :: pure
    G |- pure : S -> [] S

    --------------------------------------- :: ap
    G |- ap : [] (S -> T) -> ([] S -> [] T)

  defn
    G |-<: t : T ::  :: stype :: tys_ {{ com $[[t]]$ has type $[[T]]$ in context $[[G]]$ with subtyping }} by

    G |- t : T
    ------------ :: emb
    G |-<: t : T

    G |-<: x : S     S <: T
    --------------------- :: sub
    G |-<: x : T
